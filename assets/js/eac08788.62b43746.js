"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8352],{3905:function(n,r,t){t.d(r,{Zo:function(){return c},kt:function(){return d}});var e=t(67294);function a(n,r,t){return r in n?Object.defineProperty(n,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[r]=t,n}function i(n,r){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),t.push.apply(t,e)}return t}function l(n){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(n,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(t,r))}))}return n}function o(n,r){if(null==n)return{};var t,e,a=function(n,r){if(null==n)return{};var t,e,a={},i=Object.keys(n);for(e=0;e<i.length;e++)t=i[e],r.indexOf(t)>=0||(a[t]=n[t]);return a}(n,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(e=0;e<i.length;e++)t=i[e],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var p=e.createContext({}),m=function(n){var r=e.useContext(p),t=r;return n&&(t="function"==typeof n?n(r):l(l({},r),n)),t},c=function(n){var r=m(n.components);return e.createElement(p.Provider,{value:r},n.children)},s={inlineCode:"code",wrapper:function(n){var r=n.children;return e.createElement(e.Fragment,{},r)}},k=e.forwardRef((function(n,r){var t=n.components,a=n.mdxType,i=n.originalType,p=n.parentName,c=o(n,["components","mdxType","originalType","parentName"]),k=m(t),d=a,u=k["".concat(p,".").concat(d)]||k[d]||s[d]||i;return t?e.createElement(u,l(l({ref:r},c),{},{components:t})):e.createElement(u,l({ref:r},c))}));function d(n,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof n||a){var i=t.length,l=new Array(i);l[0]=k;var o={};for(var p in r)hasOwnProperty.call(r,p)&&(o[p]=r[p]);o.originalType=n,o.mdxType="string"==typeof n?n:a,l[1]=o;for(var m=2;m<i;m++)l[m]=t[m];return e.createElement.apply(null,l)}return e.createElement.apply(null,t)}k.displayName="MDXCreateElement"},94008:function(n,r,t){t.r(r),t.d(r,{assets:function(){return p},contentTitle:function(){return l},default:function(){return s},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var e=t(83117),a=(t(67294),t(3905));const i={slug:"common-sort-basic",title:"6\u79cd\u5e38\u7528\u7684\u6392\u5e8f",date:"2019-09-13 10:10"},l=void 0,o={unversionedId:"algo/2019/09-13-common-sort-basic",id:"algo/2019/09-13-common-sort-basic",title:"6\u79cd\u5e38\u7528\u7684\u6392\u5e8f",description:"\u5e38\u7528\u6392\u5e8f\u7c7b\u578b",source:"@site/docs/algo/2019/09-13-common-sort-basic.md",sourceDirName:"algo/2019",slug:"/algo/2019/common-sort-basic",permalink:"/docs/algo/2019/common-sort-basic",draft:!1,editUrl:"https://github.com/zeffon/zeffon.github.io/tree/master/docs/algo/2019/09-13-common-sort-basic.md",tags:[],version:"current",frontMatter:{slug:"common-sort-basic",title:"6\u79cd\u5e38\u7528\u7684\u6392\u5e8f",date:"2019-09-13 10:10"},sidebar:"tutorialSidebar",previous:{title:"AVL\u6811\u3001\u7ea2\u9ed1\u6811\u548c\u54c8\u5e0c\u8868",permalink:"/docs/algo/2019/avl-and-red\u2013black-tree"}},p={},m=[{value:"\u5e38\u7528\u6392\u5e8f\u7c7b\u578b",id:"\u5e38\u7528\u6392\u5e8f\u7c7b\u578b",level:2},{value:"Bubble Sort \u5192\u6ce1\u6392\u5e8f",id:"bubble-sort-\u5192\u6ce1\u6392\u5e8f",level:3},{value:"Selection sort \u9009\u62e9\u6392\u5e8f",id:"selection-sort-\u9009\u62e9\u6392\u5e8f",level:3},{value:"Insertion Sort \u63d2\u5165\u6392\u5e8f",id:"insertion-sort-\u63d2\u5165\u6392\u5e8f",level:3},{value:"Merge sort \u5f52\u5e76\u6392\u5e8f",id:"merge-sort-\u5f52\u5e76\u6392\u5e8f",level:3},{value:"Quicksort \u5feb\u901f\u6392\u5e8f",id:"quicksort-\u5feb\u901f\u6392\u5e8f",level:3},{value:"\u53cc\u8def\u6392\u5e8f",id:"\u53cc\u8def\u6392\u5e8f",level:4},{value:"\u4e09\u8def\u6392\u5e8f",id:"\u4e09\u8def\u6392\u5e8f",level:4},{value:"Heapsort \u5806\u6392\u5e8f",id:"heapsort-\u5806\u6392\u5e8f",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2},{value:"\u53c2\u8003\u6587\u732e",id:"\u53c2\u8003\u6587\u732e",level:2}],c={toc:m};function s(n){let{components:r,...t}=n;return(0,a.kt)("wrapper",(0,e.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u5e38\u7528\u6392\u5e8f\u7c7b\u578b"},"\u5e38\u7528\u6392\u5e8f\u7c7b\u578b"),(0,a.kt)("h3",{id:"bubble-sort-\u5192\u6ce1\u6392\u5e8f"},"Bubble Sort \u5192\u6ce1\u6392\u5e8f"),(0,a.kt)("p",null,"\u5192\u6ce1\u6392\u5e8f\u662f\u4e00\u79cd\u7b80\u5355\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83",(0,a.kt)("inlineCode",{parentName:"p"},"\u91cd\u590d\u5730"),"\u8d70\u8bbf\u8fc7\u8981\u6392\u5e8f\u7684\u6570\u5217\uff0c\u4e00\u6b21\u6bd4\u8f83",(0,a.kt)("inlineCode",{parentName:"p"},"\u4e24\u4e2a"),"\u5143\u7d20\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u987a\u5e8f\u9519\u8bef\u5c31\u628a\u4ed6\u4eec",(0,a.kt)("inlineCode",{parentName:"p"},"\u4ea4\u6362"),"\u8fc7\u6765\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\u7684\u8fd0\u4f5c\u5982\u4e0b\uff1a")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u6bd4\u8f83",(0,a.kt)("inlineCode",{parentName:"li"},"\u76f8\u90bb"),"\u7684\u5143\u7d20\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u6bd4\u7b2c\u4e8c\u4e2a\u5927\uff0c\u5c31",(0,a.kt)("inlineCode",{parentName:"li"},"\u4ea4\u6362"),"\u4ed6\u4eec\u4e24\u4e2a\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u5bf9\u6bcf\u4e00\u5bf9\u76f8\u90bb\u5143\u7d20\u4f5c\u540c\u6837\u7684\u5de5\u4f5c\uff0c\u4ece\u5f00\u59cb",(0,a.kt)("inlineCode",{parentName:"li"},"\u7b2c\u4e00\u5bf9"),"\u5230\u7ed3\u5c3e\u7684",(0,a.kt)("inlineCode",{parentName:"li"},"\u6700\u540e"),"\u4e00\u5bf9\u3002\u8fd9\u6b65\u505a\u5b8c\u540e\uff0c\u6700\u540e\u7684\u5143\u7d20\u4f1a\u662f\u6700\u5927\u7684\u6570\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u9488\u5bf9\u6240\u6709\u7684\u5143\u7d20\u91cd\u590d\u4ee5\u4e0a\u7684\u6b65\u9aa4\uff0c\u9664\u4e86",(0,a.kt)("inlineCode",{parentName:"li"},"\u6700\u540e"),"\u4e00\u4e2a\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u6301\u7eed\u6bcf\u6b21\u5bf9\u8d8a\u6765\u8d8a\u5c11\u7684\u5143\u7d20",(0,a.kt)("inlineCode",{parentName:"li"},"\u91cd\u590d"),"\u4e0a\u9762\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u4e00\u5bf9\u6570\u5b57\u9700\u8981\u6bd4\u8f83\u3002")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u65f6\u95f4\u590d\u6742\u5ea6",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"\u6700\u574f"),"\u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"\u6700\u4f18"),"\u65f6\u95f4\u590d\u6742\u5ea6 O(n)",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"\u5e73\u5747"),"\u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u7b80\u5355\u7684\u5192\u6ce1\u6392\u5e8f"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    public static void bubbleSort(int [] a, int n){\n        for(int i=0; i<n; i++){\n            for(int j=1; j<n-i; j++){\n                if(arr[j-1] > arr[j]){\n                    swap(arr, j-1, j);\n                }\n            }\n        }\n    }\n    // \u4ea4\u6362 i, j \u4f4d\u7f6e\n    private static void swap(Object[] arr, int i, int j) {\n        Object t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4f18\u5316--\u9762\u5bf9\u5df2\u7ecf",(0,a.kt)("inlineCode",{parentName:"li"},"\u6392\u597d\u987a\u5e8f"),"\u6570\u7ec4\u65f6\u7684\u4f18\u5316\u65b9\u6848")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    public static void bubbleSort(int [] a, int n){\n        int j, k = n;\n        boolean flag = true;\n        while (flag){\n            flag=false; // \u5982\u679c\u6709\u4e00\u8d9f\u6ca1\u6709\u53d1\u751f\u4f4d\u7f6e\u4ea4\u6362\uff0c\u8bf4\u660e\u6392\u5e8f\u5df2\u7ecf\u5b8c\u6210\u3002\n            for(j=1; j<k; j++){\n                if(a[j-1] > a[j]){\n                    swap(arr, j-1, j);\n                    flag = true;\n                }\n            }\n            k--;\n        }\n    }\n    // \u4ea4\u6362 i, j \u4f4d\u7f6e\n    private static void swap(Object[] arr, int i, int j) {\n        Object t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n")),(0,a.kt)("h3",{id:"selection-sort-\u9009\u62e9\u6392\u5e8f"},"Selection sort \u9009\u62e9\u6392\u5e8f"),(0,a.kt)("p",null,"\u9996\u5148\u5728\u672a\u6392\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u5b58\u653e\u5230\u6392\u5e8f\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7136\u540e\uff0c\u518d\u4ece\u5269\u4f59\u672a\u6392\u5e8f\u5143\u7d20\u4e2d\u7ee7\u7eed\u5bfb\u627e\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u7136\u540e\u653e\u5230\u5df2\u6392\u5e8f\u5e8f\u5217\u7684\u672b\u5c3e\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u5747\u6392\u5e8f\u5b8c\u6bd5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    public static void sort(Comparable[] arr){\n\n        int n = arr.length;\n        for( int i = 0 ; i < n ; i ++ ){\n            // \u5bfb\u627e[i, n)\u533a\u95f4\u91cc\u7684\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n            int minIndex = i;\n            for( int j = i + 1 ; j < n ; j ++ )\n                // \u4f7f\u7528compareTo\u65b9\u6cd5\u6bd4\u8f83\u4e24\u4e2aComparable\u5bf9\u8c61\u7684\u5927\u5c0f\n                if( arr[j].compareTo( arr[minIndex] ) < 0 )\n                    minIndex = j;\n            swap( arr , i , minIndex);\n        }\n    }\n\n    private static void swap(Object[] arr, int i, int j) {\n        Object t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n")),(0,a.kt)("h3",{id:"insertion-sort-\u63d2\u5165\u6392\u5e8f"},"Insertion Sort \u63d2\u5165\u6392\u5e8f"),(0,a.kt)("p",null,"\u63d2\u5165\u6392\u5e8f\u7684\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7\u6784\u5efa",(0,a.kt)("inlineCode",{parentName:"p"},"\u6709\u5e8f"),"\u5e8f\u5217\uff0c\u5bf9\u4e8e",(0,a.kt)("inlineCode",{parentName:"p"},"\u672a\u6392\u5e8f"),"\u6570\u636e\uff0c\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"\u5df2\u6392\u5e8f"),"\u5e8f\u5217\u4e2d\u4ece\u540e\u5411\u524d\u626b\u63cf\uff0c\u627e\u5230\u76f8\u5e94\u4f4d\u7f6e\u5e76\u63d2\u5165\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5177\u4f53\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u5143\u7d20\u53ef\u4ee5\u8ba4\u4e3a\u5df2\u7ecf\u88ab\u6392\u5e8f"),(0,a.kt)("li",{parentName:"ol"},"\u53d6\u51fa\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5728",(0,a.kt)("inlineCode",{parentName:"li"},"\u5df2\u7ecf\u6392\u5e8f"),"\u7684\u5143\u7d20\u5e8f\u5217\u4e2d\u4ece\u540e\u5411\u524d\u626b\u63cf"),(0,a.kt)("li",{parentName:"ol"},"\u5982\u679c\u8be5\u5143\u7d20\uff08\u5df2\u6392\u5e8f\uff09\u5927\u4e8e\u65b0\u5143\u7d20\uff0c\u5c06\u8be5\u5143\u7d20\u79fb\u5230",(0,a.kt)("inlineCode",{parentName:"li"},"\u4e0b\u4e00\u4f4d\u7f6e")),(0,a.kt)("li",{parentName:"ol"},"\u91cd\u590d",(0,a.kt)("inlineCode",{parentName:"li"},"\u6b65\u9aa43"),"\uff0c\u76f4\u5230\u627e\u5230\u5df2\u6392\u5e8f\u7684\u5143\u7d20\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u65b0\u5143\u7d20\u7684\u4f4d\u7f6e"),(0,a.kt)("li",{parentName:"ol"},"\u5c06\u65b0\u5143\u7d20\u63d2\u5165\u5230\u8be5\u4f4d\u7f6e\u540e"),(0,a.kt)("li",{parentName:"ol"},"\u91cd\u590d\u6b65\u9aa4",(0,a.kt)("inlineCode",{parentName:"li"},"2~5"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    public static void sort(Comparable[] arr){\n        int n = arr.length;\n        for (int i = 0; i < n; i++) {\n            // \u5bfb\u627e\u5143\u7d20arr[i]\u5408\u9002\u7684\u63d2\u5165\u4f4d\u7f6e\n\n            // \u5199\u6cd51\n           for(int j = i ; j > 0 ; j --)\n               if(arr[j].compareTo(arr[j-1]) < 0)\n                   swap( arr, j , j-1 );\n               else\n                   break;\n\n            // \u5199\u6cd52\n            for(int j = i; j > 0 && arr[j].compareTo(arr[j-1]) < 0 ; j--)\n                swap(arr, j, j-1);\n\n            // \u5199\u6cd53\n            Comparable e = arr[i];\n            for(int j = i; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)\n                arr[j] = arr[j-1];\n            arr[j] = e;\n\n        }\n    }\n\n    private static void swap(Object[] arr, int i, int j) {\n        Object t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n")),(0,a.kt)("h3",{id:"merge-sort-\u5f52\u5e76\u6392\u5e8f"},"Merge sort \u5f52\u5e76\u6392\u5e8f"),(0,a.kt)("p",null,"\u91c7\u7528\u5206\u6cbb\u6cd5:\n\u5206\u5272\uff1a\u9012\u5f52\u5730\u628a\u5f53\u524d\u5e8f\u5217\u5e73\u5747\u5206\u5272\u6210\u4e24\u534a\u3002\n\u96c6\u6210\uff1a\u5728\u4fdd\u6301\u5143\u7d20\u987a\u5e8f\u7684\u540c\u65f6\u5c06\u4e0a\u4e00\u6b65\u5f97\u5230\u7684\u5b50\u5e8f\u5217\u96c6\u6210\u5230\u4e00\u8d77\uff08\u5f52\u5e76\uff09\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    // \u5c06arr[l...mid]\u548carr[mid+1...r]\u4e24\u90e8\u5206\u8fdb\u884c\u5f52\u5e76\n    private static void merge(Comparable[] arr, int l, int mid, int r) {\n\n        Comparable[] aux = Arrays.copyOfRange(arr, l, r+1);\n\n        // \u521d\u59cb\u5316\uff0ci\u6307\u5411\u5de6\u534a\u90e8\u5206\u7684\u8d77\u59cb\u7d22\u5f15\u4f4d\u7f6el\uff1bj\u6307\u5411\u53f3\u534a\u90e8\u5206\u8d77\u59cb\u7d22\u5f15\u4f4d\u7f6emid+1\n        int i = l, j = mid+1;\n        for( int k = l ; k <= r; k ++ ){\n\n            if( i > mid ){  // \u5982\u679c\u5de6\u534a\u90e8\u5206\u5143\u7d20\u5df2\u7ecf\u5168\u90e8\u5904\u7406\u5b8c\u6bd5\n                arr[k] = aux[j-l]; j ++;\n            }\n            else if( j > r ){   // \u5982\u679c\u53f3\u534a\u90e8\u5206\u5143\u7d20\u5df2\u7ecf\u5168\u90e8\u5904\u7406\u5b8c\u6bd5\n                arr[k] = aux[i-l]; i ++;\n            }\n            else if( aux[i-l].compareTo(aux[j-l]) < 0 ){  // \u5de6\u534a\u90e8\u5206\u6240\u6307\u5143\u7d20 < \u53f3\u534a\u90e8\u5206\u6240\u6307\u5143\u7d20\n                arr[k] = aux[i-l]; i ++;\n            }\n            else{  // \u5de6\u534a\u90e8\u5206\u6240\u6307\u5143\u7d20 >= \u53f3\u534a\u90e8\u5206\u6240\u6307\u5143\u7d20\n                arr[k] = aux[j-l]; j ++;\n            }\n        }\n    }\n\n    // \u9012\u5f52\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f,\u5bf9arr[l...r]\u7684\u8303\u56f4\u8fdb\u884c\u6392\u5e8f\n    private static void sort(Comparable[] arr, int l, int r) {\n\n\n        // \u4f18\u53162: \u5bf9\u4e8e\u5c0f\u89c4\u6a21\u6570\u7ec4, \u4f7f\u7528\u63d2\u5165\u6392\u5e8f\n        if( r - l <= 15 ){\n            InsertionSort.sort(arr, l, r);\n            return;\n        }\n        // if (l >= r)\n        //     return;\n\n        int mid = l + (r-l)/2; // (l+r)/2\n        sort(arr, l, mid);\n        sort(arr, mid + 1, r);\n\n        // \u4f18\u53161: \u5bf9\u4e8earr[mid] <= arr[mid+1]\u7684\u60c5\u51b5,\u4e0d\u8fdb\u884cmerge\n        // \u5bf9\u4e8e\u8fd1\u4e4e\u6709\u5e8f\u7684\u6570\u7ec4\u975e\u5e38\u6709\u6548,\u4f46\u662f\u5bf9\u4e8e\u4e00\u822c\u60c5\u51b5,\u6709\u4e00\u5b9a\u7684\u6027\u80fd\u635f\u5931\n        if( arr[mid].compareTo(arr[mid+1]) > 0 )\n            merge(arr, l, mid, r);\n        // merge(arr, l, mid, r);\n    }\n\n    public static void sort(Comparable[] arr){\n\n        int n = arr.length;\n        sort(arr, 0, n-1);\n    }\n")),(0,a.kt)("h3",{id:"quicksort-\u5feb\u901f\u6392\u5e8f"},"Quicksort \u5feb\u901f\u6392\u5e8f"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5feb\u901f\u6392\u5e8f\u4f7f\u7528\u5206\u6cbb\u6cd5\uff08Divide and conquer\uff09\u7b56\u7565\u6765\u628a\u4e00\u4e2a\u5e8f\u5217\uff08list\uff09\u5206\u4e3a\u8f83\u5c0f\u548c\u8f83\u5927\u7684 2 \u4e2a\u5b50\u5e8f\u5217\uff0c\u7136\u540e",(0,a.kt)("inlineCode",{parentName:"li"},"\u9012\u5f52"),"\u5730\u6392\u5e8f\u4e24\u4e2a\u5b50\u5e8f\u5217\u3002",(0,a.kt)("inlineCode",{parentName:"li"},"\u6b65\u9aa4"),"\u4e3a\uff1a")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u6311\u9009\u57fa\u51c6\u503c\uff1a\u4ece\u6570\u5217\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a",(0,a.kt)("inlineCode",{parentName:"li"},"\u57fa\u51c6"),"\uff08pivot\uff09\uff0c"),(0,a.kt)("li",{parentName:"ol"},"\u5206\u5272\uff1a",(0,a.kt)("inlineCode",{parentName:"li"},"\u91cd\u65b0"),"\u6392\u5e8f\u6570\u5217\uff0c\u6240\u6709\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u5143\u7d20\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u5143\u7d20\u6446\u5728\u57fa\u51c6\u540e\u9762\uff08\u4e0e\u57fa\u51c6\u503c\u76f8\u7b49\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4f55\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u5272\u7ed3\u675f\u4e4b\u540e\uff0c\u5bf9\u57fa\u51c6\u503c\u7684\u6392\u5e8f\u5c31\u5df2\u7ecf\u5b8c\u6210\uff0c"),(0,a.kt)("li",{parentName:"ol"},"\u9012\u5f52\u6392\u5e8f\u5b50\u5e8f\u5217\uff1a",(0,a.kt)("inlineCode",{parentName:"li"},"\u9012\u5f52"),"\u5730\u5c06\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u6392\u5e8f\u3002")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u9012\u5f52\u5230\u6700\u5e95\u90e8\u7684",(0,a.kt)("inlineCode",{parentName:"li"},"\u5224\u65ad\u6761\u4ef6"),"\u662f\u6570\u5217\u7684\u5927\u5c0f\u662f\u96f6\u6216\u4e00\uff0c\u6b64\u65f6\u8be5\u6570\u5217\u663e\u7136\u5df2\u7ecf",(0,a.kt)("inlineCode",{parentName:"li"},"\u6709\u5e8f"),"\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    // \u5bf9arr[l...r]\u90e8\u5206\u8fdb\u884cpartition\u64cd\u4f5c\n    // \u8fd4\u56dep, \u4f7f\u5f97arr[l...p-1] < arr[p] ; arr[p+1...r] > arr[p]\n    private static int partition(Comparable[] arr, int l, int r){\n\n        Comparable v = arr[l];\n\n        int j = l; // arr[l+1...j] < v ; arr[j+1...i) > v\n        for( int i = l + 1 ; i <= r ; i ++ )\n            if( arr[i].compareTo(v) < 0 ){\n                j ++;\n                swap(arr, j, i);\n            }\n        swap(arr, l, j);\n        return j;\n    }\n\n    // \u9012\u5f52\u4f7f\u7528\u5feb\u901f\u6392\u5e8f,\u5bf9arr[l...r]\u7684\u8303\u56f4\u8fdb\u884c\u6392\u5e8f\n    private static void sort(Comparable[] arr, int l, int r){\n        if( l >= r )\n            return;\n        int p = partition(arr, l, r);\n        sort(arr, l, p-1 );\n        sort(arr, p+1, r);\n    }\n\n    public static void sort(Comparable[] arr){\n        int n = arr.length;\n        sort(arr, 0, n-1);\n    }\n\n    private static void swap(Object[] arr, int i, int j) {\n        Object t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n")),(0,a.kt)("h4",{id:"\u53cc\u8def\u6392\u5e8f"},"\u53cc\u8def\u6392\u5e8f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class QuickSort2Ways {\n    // \u53cc\u8def\u5feb\u901f\u6392\u5e8f\u7684partition\n    // \u8fd4\u56dep, \u4f7f\u5f97arr[l...p-1] < arr[p] ; arr[p+1...r] > arr[p]\n    private static int partition(Comparable[] arr, int l, int r){\n\n        // \u968f\u673a\u5728arr[l...r]\u7684\u8303\u56f4\u4e2d, \u9009\u62e9\u4e00\u4e2a\u6570\u503c\u4f5c\u4e3a\u6807\u5b9a\u70b9pivot\n        swap( arr, l , (int)(Math.random()*(r-l+1))+l );\n        Comparable v = arr[l];\n\n        // arr[l+1...i) <= v; arr(j...r] >= v\n        int i = l+1, j = r;\n        while( true ){\n            // \u6ce8\u610f\u8fd9\u91cc\u7684\u8fb9\u754c, arr[i].compareTo(v) < 0, \u4e0d\u80fd\u662farr[i].compareTo(v) <= 0\n            while( i <= r && arr[i].compareTo(v) < 0 )\n                i ++;\n\n            // \u6ce8\u610f\u8fd9\u91cc\u7684\u8fb9\u754c, arr[j].compareTo(v) > 0, \u4e0d\u80fd\u662farr[j].compareTo(v) >= 0\n            while( j >= l+1 && arr[j].compareTo(v) > 0 )\n                j --;\n\n            if( i > j )\n                break;\n\n            swap( arr, i, j );\n            i ++;\n            j --;\n        }\n\n        swap(arr, l, j);\n        return j;\n    }\n\n    // \u9012\u5f52\u4f7f\u7528\u5feb\u901f\u6392\u5e8f,\u5bf9arr[l...r]\u7684\u8303\u56f4\u8fdb\u884c\u6392\u5e8f\n    private static void sort(Comparable[] arr, int l, int r){\n\n        // \u5bf9\u4e8e\u5c0f\u89c4\u6a21\u6570\u7ec4, \u4f7f\u7528\u63d2\u5165\u6392\u5e8f\n        if( r - l <= 15 ){\n            InsertionSort.sort(arr, l, r);\n            return;\n        }\n        int p = partition(arr, l, r);\n        sort(arr, l, p-1 );\n        sort(arr, p+1, r);\n    }\n\n    public static void sort(Comparable[] arr){\n\n        int n = arr.length;\n        sort(arr, 0, n-1);\n    }\n\n    private static void swap(Object[] arr, int i, int j) {\n        Object t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n}\n")),(0,a.kt)("h4",{id:"\u4e09\u8def\u6392\u5e8f"},"\u4e09\u8def\u6392\u5e8f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class QuickSort3Ways {\n    // \u9012\u5f52\u4f7f\u7528\u5feb\u901f\u6392\u5e8f,\u5bf9arr[l...r]\u7684\u8303\u56f4\u8fdb\u884c\u6392\u5e8f\n    private static void sort(Comparable[] arr, int l, int r){\n\n        // \u5bf9\u4e8e\u5c0f\u89c4\u6a21\u6570\u7ec4, \u4f7f\u7528\u63d2\u5165\u6392\u5e8f\n        if( r - l <= 15 ){\n            InsertionSort.sort(arr, l, r);\n            return;\n        }\n        // \u968f\u673a\u5728arr[l...r]\u7684\u8303\u56f4\u4e2d, \u9009\u62e9\u4e00\u4e2a\u6570\u503c\u4f5c\u4e3a\u6807\u5b9a\u70b9pivot\n        swap( arr, l, (int)(Math.random()*(r-l+1)) + l );\n        Comparable v = arr[l];\n\n        int lt = l;     // arr[l+1...lt] < v\n        int gt = r + 1; // arr[gt...r] > v\n        int i = l+1;    // arr[lt+1...i) == v\n        while( i < gt ){\n            if( arr[i].compareTo(v) < 0 ){\n                swap( arr, i, lt+1);\n                i ++;\n                lt ++;\n            }\n            else if( arr[i].compareTo(v) > 0 ){\n                swap( arr, i, gt-1);\n                gt --;\n            }\n            else{ // arr[i] == v\n                i ++;\n            }\n        }\n\n        swap( arr, l, lt );\n\n        sort(arr, l, lt-1);\n        sort(arr, gt, r);\n    }\n\n    public static void sort(Comparable[] arr){\n\n        int n = arr.length;\n        sort(arr, 0, n-1);\n    }\n\n    private static void swap(Object[] arr, int i, int j) {\n        Object t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n}\n")),(0,a.kt)("h3",{id:"heapsort-\u5806\u6392\u5e8f"},"Heapsort \u5806\u6392\u5e8f"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u91cd\u590d\u4ece\u6700\u5927\u5806\u79ef\u53d6\u51fa\u6570\u503c",(0,a.kt)("inlineCode",{parentName:"li"},"\u6700\u5927"),"\u7684\u7ed3\u70b9(\u628a\u6839\u7ed3\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u4ea4\u6362\uff0c\u628a\u4ea4\u6362\u540e\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u79fb\u51fa\u5806)\uff0c\u5e76\u8ba9\u6b8b\u4f59\u7684\u5806\u79ef\u7ef4\u6301",(0,a.kt)("inlineCode",{parentName:"li"},"\u6700\u5927\u5806\u79ef"),"\u6027\u8d28\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u901a\u5e38\u5806\u662f\u901a\u8fc7\u4e00\u7ef4",(0,a.kt)("inlineCode",{parentName:"li"},"\u6570\u7ec4"),"\u6765\u5b9e\u73b0\u7684\u3002\u5728\u6570\u7ec4\u8d77\u59cb\u4f4d\u7f6e",(0,a.kt)("inlineCode",{parentName:"li"},"\u4e3a1"),"\u7684\u60c5\u5f62\u4e2d\uff1a")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u7236\u8282\u70b9 i \u7684",(0,a.kt)("inlineCode",{parentName:"li"},"\u5de6\u5b50\u8282\u70b9"),"\u5728\u4f4d\u7f6e (2i);"),(0,a.kt)("li",{parentName:"ol"},"\u7236\u8282\u70b9 i \u7684",(0,a.kt)("inlineCode",{parentName:"li"},"\u53f3\u5b50\u8282\u70b9"),"\u5728\u4f4d\u7f6e (2i+1);"),(0,a.kt)("li",{parentName:"ol"},"\u5b50\u8282\u70b9 i \u7684",(0,a.kt)("inlineCode",{parentName:"li"},"\u7236\u8282\u70b9"),"\u5728\u4f4d\u7f6e \uff08i/2);")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    public static void sort(Comparable[] arr){\n\n        int n = arr.length;\n\n        // \u6ce8\u610f\uff0c\u6b64\u65f6\u6211\u4eec\u7684\u5806\u662f\u4ece0\u5f00\u59cb\u7d22\u5f15\u7684\n        // \u4ece(\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15-1)/2\u5f00\u59cb\n        // \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15 = n-1\n        for( int i = (n-1-1)/2 ; i >= 0 ; i -- )\n            shiftDown2(arr, n, i);\n\n        for( int i = n-1; i > 0 ; i-- ){\n            swap( arr, 0, i);\n            shiftDown2(arr, i, 0);\n        }\n    }\n\n    // \u4ea4\u6362\u5806\u4e2d\u7d22\u5f15\u4e3ai\u548cj\u7684\u4e24\u4e2a\u5143\u7d20\n    private static void swap(Object[] arr, int i, int j){\n        Object t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n\n    // \u539f\u59cb\u7684shiftDown\u8fc7\u7a0b\n    private static void shiftDown(Comparable[] arr, int n, int k){\n\n        while( 2*k+1 < n ){\n            int j = 2*k+1;\n            if( j+1 < n && arr[j+1].compareTo(arr[j]) > 0 )\n                j += 1;\n\n            if( arr[k].compareTo(arr[j]) >= 0 )break;\n\n            swap( arr, k, j);\n            k = j;\n        }\n    }\n\n    // \u4f18\u5316\u7684shiftDown\u8fc7\u7a0b, \u4f7f\u7528\u8d4b\u503c\u7684\u65b9\u5f0f\u53d6\u4ee3\u4e0d\u65ad\u7684swap\n    private static void shiftDown2(Comparable[] arr, int n, int k){\n\n        Comparable e = arr[k];\n        while( 2*k+1 < n ){\n            int j = 2*k+1;\n            if( j+1 < n && arr[j+1].compareTo(arr[j]) > 0 )\n                j += 1;\n\n            if( e.compareTo(arr[j]) >= 0 )\n                break;\n            arr[k] = arr[j];\n            k = j;\n        }\n        arr[k] = e;\n    }\n")),(0,a.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"\u539f\u5730\u6392\u5e8f"),"\u5c31\u662f\u6307\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u4e0d\u7533\u8bf7\u591a\u4f59\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u53ea\u5229\u7528",(0,a.kt)("inlineCode",{parentName:"li"},"\u539f\u6765\u5b58\u50a8"),"\u5f85\u6392\u6570\u636e\u7684\u5b58\u50a8\u7a7a\u95f4\u8fdb\u884c\u6bd4\u8f83\u548c\u4ea4\u6362\u7684\u6570\u636e\u6392\u5e8f\u3002")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},"\u7c7b\u578b"),(0,a.kt)("th",{parentName:"tr",align:"center"},"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6"),(0,a.kt)("th",{parentName:"tr",align:"center"},"\u539f\u5730\u6392\u5e8f"),(0,a.kt)("th",{parentName:"tr",align:"center"},"\u7a33\u5b9a\u6027"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"\u5192\u6ce1\u6392\u5e8f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"O(n^2)"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u221a"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u7a33\u5b9a")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"\u9009\u62e9\u6392\u5e8f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"O(1)"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u221a"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u4e0d\u7a33\u5b9a")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"\u63d2\u5165\u6392\u5e8f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"O(n^2)"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u221a"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u7a33\u5b9a")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"\u5f52\u5e76\u6392\u5e8f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"O(nlog n)"),(0,a.kt)("td",{parentName:"tr",align:"center"},"X"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u7a33\u5b9a")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"\u5feb\u901f\u6392\u5e8f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"O(nlog n)"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u221a"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u4e0d\u7a33\u5b9a")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"\u5806\u6392\u5e8f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"O(nlog n)"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u221a"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u4e0d\u7a33\u5b9a")))),(0,a.kt)("h2",{id:"\u53c2\u8003\u6587\u732e"},"\u53c2\u8003\u6587\u732e"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u7ef4\u57fa\u767e\u79d1-",(0,a.kt)("a",{parentName:"li",href:"https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F"},"\u5192\u6ce1\u6392\u5e8f")),(0,a.kt)("li",{parentName:"ol"},"\u7ef4\u57fa\u767e\u79d1-",(0,a.kt)("a",{parentName:"li",href:"https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F"},"\u9009\u62e9\u6392\u5e8f")),(0,a.kt)("li",{parentName:"ol"},"\u7ef4\u57fa\u767e\u79d1-",(0,a.kt)("a",{parentName:"li",href:"https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F"},"\u63d2\u5165\u6392\u5e8f")),(0,a.kt)("li",{parentName:"ol"},"\u7ef4\u57fa\u767e\u79d1-",(0,a.kt)("a",{parentName:"li",href:"https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F"},"\u5f52\u5e76\u6392\u5e8f")),(0,a.kt)("li",{parentName:"ol"},"\u7ef4\u57fa\u767e\u79d1-",(0,a.kt)("a",{parentName:"li",href:"https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F"},"\u5feb\u901f\u6392\u5e8f")),(0,a.kt)("li",{parentName:"ol"},"\u7ef4\u57fa\u767e\u79d1-",(0,a.kt)("a",{parentName:"li",href:"https://zh.wikipedia.org/wiki/%E5%A0%86%E6%8E%92%E5%BA%8F"},"\u5806\u6392\u5e8f"))))}s.isMDXComponent=!0}}]);